<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woolution.shop.mapper.SalesMgtMapper">
    <!--info-->
    <insert id="infoInsert">
        insert into sales (sales_price, sales_createAT, sales_state, sales_time, service_id, cust_id)
        values (#{sales_price}, now(), 1, #{sales_time}, #{service_id}, #{cust_id})
    </insert>

    <select id="infoList" resultType="hashmap">
        select sales.id,
               sales_price,
               date_format(sales_createAT, '%Y-%m-%d')   as sales_createAT,
               sales_state,
               date_format(sales_time, '%Y-%m-%d %h:%i') as sales_time,
               service.service_nm                        as service_nm,
               cust.cust_nm                              as cust_nm,
               service.id                                as service_id,
               cust.id                                   as cust_id
        from sales,
             cust,
             service
        where service_id = service.id
          and cust.id = cust_id
          and sales_state = 1
    </select>

    <update id="infoMod">
        update sales
        set service_id  = #{service_id},
            cust_id     = #{cust_id},
            sales_price = #{sales_price},
            sales_time  = #{sales_time}
        where id = #{id}
    </update>

    <update id="infoDel">
        update sales
        set sales_state = false
        where id = #{id}
    </update>

    <select id="infoServiceList" resultType="com.woolution.shop.model.SalesMgtModel">
        select id, service_nm
        from service
        where service_state = 1
    </select>

    <select id="infoCustList" resultType="com.woolution.shop.model.CustMgtModel">
        select id, cust_nm
        from cust
        where cust_state = 1
    </select>
    <!--end info-->

    <!--anal-->
    <select id="analSalesMonth" resultType="com.woolution.shop.model.SalesMgtModel">
        select sum(if(sales_state = 1, sales_price, 0)) as monthSales
        from sales
        where sales_time >= date_add(now(), interval - 2 year)
        group by extract(year_month from sales_time)
    </select>

    <select id="analSalesPer" resultType="com.woolution.shop.model.SalesMgtModel">
        select groupSum / totalSum * 100 as result, service_nm, id
        from (select service.id as id, service_nm, sum(if(sales_state = 1, sales_price, 0)) as groupSum
              from sales,
                   service
              where service_id = service.id
              group by service_id) as gsTable,
             (select sum(if(sales_state = 1, sales_price, 0)) as totalSum from sales) as tsTable
        group by id
    </select>

    <select id="analSalesRank" resultType="hashmap">
        select groupSum / totalSum * 100 as per, cust_nm, groupSum, cnt
        from (select cust_id, cust_nm, sum(if(sales_state = 1, sales_price, 0)) as groupSum
              from sales,
                   cust
              where cust_id = cust.id
              group by cust_id) as gsTable,
             (select sum(if(sales_state = 1, sales_price, 0)) as totalSum from sales) as tsTable,
             (select count(case when sales_state = 1 then 1 end) as cnt, cust_id
              from sales
              group by cust_id) as cntTable
        where cntTable.cust_id = gsTable.cust_id
        group by gsTable.cust_id
    </select>

    <select id="analSum" resultType="com.woolution.shop.model.SalesMgtModel">
        select sum(if(sales_state = 1, sales_price, 0)) as monthSales
        from sales
        where sales_time >= date_add(now(), interval - 19 month)
        group by extract(year_month from sales_time)
    </select>

    <select id="analSumPer" resultType="hashmap">
        select a.month,
               concat(round(100 * if(@prev = 0, 0, (a.total_sales - @prev) / @prev), 1)) as growth,
               @prev := a.total_sales                                                         as total_sales
        FROM (select extract(year_month from sales_time) as month, sum(sales_price) as total_sales
              FROM sales
              where sales_time >= date_add(now(), interval -2 month)
              group by extract(year_month from sales_time)) a
    </select>

    <!--end anal-->

</mapper>